/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * The type of your data source.
 */
export enum SourceAttributesType {
    Table = "table",
    Model = "model",
}

/**
 * Attributes of the data source.
 */
export class ObjectT extends SpeakeasyBase {
    /**
     * The id of the data source.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: number;

    /**
     * The name of the data source. Required when the `type` is model and `id` is not specified.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    /**
     * The catalog of the table. Required when the `type` is table and `id` is not specified.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "table_catalog" })
    tableCatalog?: string;

    /**
     * The name of the table. Required when the `type` is table and `id` is not specified.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "table_name" })
    tableName?: string;

    /**
     * The schema of the table. Required when the `type` is table and `id` is not specified.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "table_schema" })
    tableSchema?: string;

    /**
     * The type of your data source.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type: SourceAttributesType;
}

/**
 * Attributes used to identify the data source for this sync.
 */
export class SourceAttributes extends SpeakeasyBase {
    /**
     * The id used to identify the source connection.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "connection_id" })
    connectionId: number;

    /**
     * The id used to identify the segment data source.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "filter_segment_id" })
    filterSegmentId?: number;

    /**
     * Attributes of the data source.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "object" })
    @Type(() => ObjectT)
    object: ObjectT;
}
