/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../internal/utils";
import { SyncAttributes } from "./syncattributes";
import { SyncUpdate } from "./syncupdate";
import { AxiosResponse } from "axios";
import { classToPlain, Exclude, Expose } from "class-transformer";

export class UpdateSyncRequest extends SpeakeasyBase {
    /**
     * ID of the sync
     */
    @SpeakeasyMetadata({ data: "pathParam, style=simple;explode=false;name=sync_id" })
    syncId: number;

    @SpeakeasyMetadata({ data: "request, media_type=application/json" })
    syncAttributes?: SyncAttributes;
}

/**
 * HTTP status code.
 */
export enum UpdateSyncStatus {
    FourHundredAndFour = 404,
}

/**
 * Resource not found.
 */
export class UpdateSyncResponseBody extends Error {
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    @Exclude()
    rawResponse?: AxiosResponse;

    /**
     * HTTP status code.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "status" })
    status?: UpdateSyncStatus;

    constructor(err?: UpdateSyncResponseBody) {
        super();
        if (err) {
            Object.assign(this, err);
            this.message = JSON.stringify(
                classToPlain(err, { exposeUnsetFields: false, excludeExtraneousValues: true })
            );
        }

        this.name = "UpdateSyncResponseBody";
        Object.setPrototypeOf(this, UpdateSyncResponseBody.prototype);
    }
}

export class UpdateSyncResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;

    /**
     * Successfully updated the sync
     */
    @SpeakeasyMetadata()
    syncUpdate?: SyncUpdate;
}
