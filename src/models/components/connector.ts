/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import { Expose, Type } from "class-transformer";

/**
 * How to authorize a destination of this type of connector
 */
export enum AuthMethod {
    Credentials = "credentials",
    Oauth = "oauth",
    Other = "other",
}

export enum ConnectorSchemasType {
    Textbox = "textbox",
    Textarea = "textarea",
    Toggle = "toggle",
    Select = "select",
    Keyvaluepairs = "keyvaluepairs",
}

/**
 * The type of input for this credential field
 */
export class InputType extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "allow_manual_inputs" })
    allowManualInputs?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: ConnectorSchemasType;
}

/**
 * The type of this field
 */
export enum ConnectorType {
    String = "string",
    Integer = "integer",
    Boolean = "boolean",
}

export class Fields extends SpeakeasyBase {
    /**
     * The name of this configuration field. This is used to identify the credential in the API to create a destination of this type of connector.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * The type of input for this credential field
     */
    @SpeakeasyMetadata()
    @Expose({ name: "input_type" })
    @Type(() => InputType)
    inputType?: InputType;

    /**
     * If this is a credential field that contains sensitive data
     */
    @SpeakeasyMetadata()
    @Expose({ name: "is_password_type_field" })
    isPasswordTypeField?: boolean;

    /**
     * A user facing name for this field
     */
    @SpeakeasyMetadata()
    @Expose({ name: "label" })
    label?: string;

    /**
     * A regex string the value must match
     */
    @SpeakeasyMetadata()
    @Expose({ name: "matches" })
    matches?: string;

    /**
     * A placeholder for this field, usually an example of its value
     */
    @SpeakeasyMetadata()
    @Expose({ name: "placholder" })
    placholder?: string;

    /**
     * If this credential accepts a finite list of values, what those values are
     */
    @SpeakeasyMetadata()
    @Expose({ name: "possible_values" })
    possibleValues?: string[];

    /**
     * A link to read more about this destination, usually linking to the Census docs.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "read_more" })
    readMore?: string;

    /**
     * Validations around this field, ie 'required'
     */
    @SpeakeasyMetadata()
    @Expose({ name: "rules" })
    rules?: string;

    /**
     * The type of this field
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type?: ConnectorType;
}

/**
 * Top level object containing a list of fields needed to create a destination for this type of connector
 */
export class ConfigurationFields extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: Fields })
    @Expose({ name: "fields" })
    @Type(() => Fields)
    fields?: Fields[];
}

export class Connector extends SpeakeasyBase {
    /**
     * How to authorize a destination of this type of connector
     */
    @SpeakeasyMetadata()
    @Expose({ name: "auth_method" })
    authMethod?: AuthMethod;

    /**
     * Top level object containing a list of fields needed to create a destination for this type of connector
     */
    @SpeakeasyMetadata()
    @Expose({ name: "configuration_fields" })
    @Type(() => ConfigurationFields)
    configurationFields?: ConfigurationFields;

    /**
     * The path to this connector's Census documentation, ie https://docs.getcensus.com/destinations/{documentation_slug}.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "documentation_slug" })
    documentationSlug?: string;

    /**
     * The name of this connector.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "label" })
    label?: string;

    /**
     * The full name for this connector. This is used to identify the connector in the API
     */
    @SpeakeasyMetadata()
    @Expose({ name: "service_name" })
    serviceName?: string;
}
